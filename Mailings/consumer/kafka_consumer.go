package consumer

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/confluentinc/confluent-kafka-go/v2/kafka"
)

type KafkaConsumer struct {
	consumer    *kafka.Consumer
	topics      []string
	stopChannel chan struct{}
}

func NewKafkaConsumer(bootstrapServers string, groupID string, topics []string) (*KafkaConsumer, error) {
	consumer, err := kafka.NewConsumer(&kafka.ConfigMap{
		"bootstrap.servers":       bootstrapServers,
		"group.id":                groupID,
		"auto.offset.reset":       "earliest",
		"enable.auto.commit":      true,
		"auto.commit.interval.ms": 5000,
	})

	if err != nil {
		return nil, err
	}

	log.Printf("–°–æ–∑–¥–∞–Ω Kafka consumer, –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫: %s, –≥—Ä—É–ø–ø–∞: %s", bootstrapServers, groupID)
	return &KafkaConsumer{
		consumer:    consumer,
		topics:      topics,
		stopChannel: make(chan struct{}),
	}, nil
}

func (c *KafkaConsumer) Start(ctx context.Context) error {
	err := c.consumer.SubscribeTopics(c.topics, nil)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ç–æ–ø–∏–∫–∏ %v: %w", c.topics, err)
	}

	log.Printf("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–æ–ø–∏–∫–∏: %s", strings.Join(c.topics, ", "))

	go func() {
		for {
			select {
			case <-ctx.Done():
				log.Println("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
				c.Stop()
				return
			case <-c.stopChannel:
				log.Println("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
				return
			default:
				msg, err := c.consumer.ReadMessage(100 * time.Millisecond)
				if err != nil {
					if err.(kafka.Error).Code() != kafka.ErrTimedOut {
						log.Printf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
					}
					continue
				}

				c.handleMessage(msg)
			}
		}
	}()

	return nil
}

func (c *KafkaConsumer) Stop() {
	close(c.stopChannel)
	if err := c.consumer.Close(); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è Kafka consumer: %v", err)
	}
}

func (c *KafkaConsumer) handleMessage(msg *kafka.Message) {
	topic := *msg.TopicPartition.Topic
	key := string(msg.Key)
	value := string(msg.Value)

	fmt.Printf("\n\n==== –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ====\n")
	fmt.Printf("–¢–æ–ø–∏–∫: %s\n", topic)
	fmt.Printf("–ö–ª—é—á: %s\n", key)
	fmt.Printf("–ó–Ω–∞—á–µ–Ω–∏–µ: %s\n", value)

	eventType := getEventTypeFromKey(key)
	fmt.Printf("–¢–∏–ø —Å–æ–±—ã—Ç–∏—è: %s\n\n", eventType)

	switch eventType {
	case "OrderCreatedEvent":
		handleOrderCreated(value)
	case "OrderStatusChangedEvent":
		handleOrderStatusChanged(value)
	case "OrderCancelledEvent":
		handleOrderCancelled(value)
	case "OrderDiscountAppliedEvent":
		handleOrderDiscountApplied(value)
	case "OrderDiscountRemovedEvent":
		handleOrderDiscountRemoved(value)
	default:
		fmt.Printf("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è: %s\n", eventType)
	}
}

func getEventTypeFromKey(key string) string {
	parts := strings.Split(key, "-")
	if len(parts) > 0 {
		return parts[0]
	}
	return "Unknown"
}

func handleOrderCreated(value string) {
	fmt.Println("‚úâÔ∏è –û–¢–ü–†–ê–í–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø: –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω")
	fmt.Println("üìß –¢–µ–º–∞: –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–∫–∞–∑!")
	fmt.Println("üìù –¢–µ–∫—Å—Ç: –í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")
	fmt.Println("üîÑ –°—Ç–∞—Ç—É—Å: –°–æ–∑–¥–∞–Ω")
}

func handleOrderStatusChanged(value string) {
	var event struct {
		NewStatus string `json:"newStatus"`
	}

	if err := json.Unmarshal([]byte(value), &event); err != nil {
		fmt.Printf("–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ JSON: %v\n", err)
		return
	}

	fmt.Println("‚úâÔ∏è –û–¢–ü–†–ê–í–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø: –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–µ–Ω")
	fmt.Println("üìß –¢–µ–º–∞: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞")
	fmt.Printf("üìù –¢–µ–∫—Å—Ç: –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: %s\n", event.NewStatus)
	fmt.Printf("üîÑ –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: %s\n", event.NewStatus)
}

func handleOrderCancelled(value string) {
	var event struct {
		Reason string `json:"reason"`
	}

	if err := json.Unmarshal([]byte(value), &event); err != nil {
		fmt.Printf("–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ JSON: %v\n", err)
		return
	}

	fmt.Println("‚úâÔ∏è –û–¢–ü–†–ê–í–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø: –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω")
	fmt.Println("üìß –¢–µ–º–∞: –í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω")
	fmt.Printf("üìù –¢–µ–∫—Å—Ç: –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω. –ü—Ä–∏—á–∏–Ω–∞: %s\n", event.Reason)
	fmt.Println("‚ùå –°—Ç–∞—Ç—É—Å: –û—Ç–º–µ–Ω–µ–Ω")
}

func handleOrderDiscountApplied(value string) {
	var event struct {
		DiscountName       string  `json:"discountName"`
		DiscountPercentage float64 `json:"discountPercentage"`
		OriginalAmount     struct {
			Amount   float64 `json:"amount"`
			Currency string  `json:"currency"`
		} `json:"originalAmount"`
		DiscountedAmount struct {
			Amount   float64 `json:"amount"`
			Currency string  `json:"currency"`
		} `json:"discountedAmount"`
	}

	if err := json.Unmarshal([]byte(value), &event); err != nil {
		fmt.Printf("–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ JSON: %v\n", err)
		return
	}

	fmt.Println("‚úâÔ∏è –û–¢–ü–†–ê–í–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø: –ü—Ä–∏–º–µ–Ω–µ–Ω–∞ —Å–∫–∏–¥–∫–∞ –∫ –∑–∞–∫–∞–∑—É")
	fmt.Println("üìß –¢–µ–º–∞: –ö –≤–∞—à–µ–º—É –∑–∞–∫–∞–∑—É –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ —Å–∫–∏–¥–∫–∞!")
	fmt.Printf("üìù –¢–µ–∫—Å—Ç: –ö –≤–∞—à–µ–º—É –∑–∞–∫–∞–∑—É –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ —Å–∫–∏–¥–∫–∞ '%s' (%.2f%%).\n",
		event.DiscountName, event.DiscountPercentage)
	fmt.Printf("üí∞ –ò—Å—Ö–æ–¥–Ω–∞—è —Å—É–º–º–∞: %.2f %s\n",
		event.OriginalAmount.Amount, event.OriginalAmount.Currency)
	fmt.Printf("üí∏ –°—É–º–º–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π: %.2f %s\n",
		event.DiscountedAmount.Amount, event.DiscountedAmount.Currency)
	fmt.Printf("üî• –í—ã —Å—ç–∫–æ–Ω–æ–º–∏–ª–∏: %.2f %s\n",
		event.OriginalAmount.Amount-event.DiscountedAmount.Amount,
		event.OriginalAmount.Currency)
}

func handleOrderDiscountRemoved(value string) {
	var event struct {
		DiscountId     string `json:"discountId"`
		OriginalAmount struct {
			Amount   float64 `json:"amount"`
			Currency string  `json:"currency"`
		} `json:"originalAmount"`
		DiscountedAmount struct {
			Amount   float64 `json:"amount"`
			Currency string  `json:"currency"`
		} `json:"discountedAmount"`
	}

	if err := json.Unmarshal([]byte(value), &event); err != nil {
		fmt.Printf("–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ JSON: %v\n", err)
		return
	}

	fmt.Println("‚úâÔ∏è –û–¢–ü–†–ê–í–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø: –°–∫–∏–¥–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∑–∞–∫–∞–∑–∞")
	fmt.Println("üìß –¢–µ–º–∞: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –≤–∞—à–µ–º –∑–∞–∫–∞–∑–µ")
	fmt.Println("üìù –¢–µ–∫—Å—Ç: –°–∫–∏–¥–∫–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞.")
	fmt.Printf("üí∞ –ù–æ–≤–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: %.2f %s\n",
		event.OriginalAmount.Amount, event.OriginalAmount.Currency)
}
