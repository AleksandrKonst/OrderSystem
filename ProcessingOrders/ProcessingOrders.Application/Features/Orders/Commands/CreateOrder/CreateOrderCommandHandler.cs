using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using MediatR;
using ProcessingOrders.Application.Services;
using ProcessingOrders.CoreDomain.Aggregates;
using ProcessingOrders.CoreDomain.Entities;
using ProcessingOrders.CoreDomain.Repositories;
using ProcessingOrders.CoreDomain.ValueObjects;

namespace ProcessingOrders.Application.Features.Orders.Commands.CreateOrder;

public class CreateOrderCommandHandler : IRequestHandler<CreateOrderCommand, Order>
{
    private readonly IOrderRepository _orderRepository;
    private readonly DiscountService _discountService;

    public CreateOrderCommandHandler(
        IOrderRepository orderRepository,
        DiscountService discountService)
    {
        _orderRepository = orderRepository ?? throw new ArgumentNullException(nameof(orderRepository));
        _discountService = discountService ?? throw new ArgumentNullException(nameof(discountService));
    }

    public async Task<Order> Handle(CreateOrderCommand request, CancellationToken cancellationToken)
    {
        try
        {
            var customerId = CustomerId.FromLong(request.CustomerId);
            var orderItemsData = request.Items.Select(itemDto => new OrderItemData
                {
                    ProductId = itemDto.ProductId,
                    ProductName = itemDto.ProductName,
                    Quantity = itemDto.Quantity,
                    Price = itemDto.Price,
                    Currency = itemDto.Currency
                })
                .ToList();
            
            var orderAggregate = OrderAggregate.Create(customerId, orderItemsData);
            await _orderRepository.AddAsync(orderAggregate);
            
            if (orderAggregate.Id <= 0)
            {
                throw new InvalidOperationException("Order ID was not generated by the database");
            }
            
            orderAggregate.AddItemsAfterSave(orderItemsData);
            
            await _discountService.ApplyPromotionsToOrder(orderAggregate);
            await _orderRepository.UpdateAsync(orderAggregate);
            
            return orderAggregate.Order;
        }
        catch (Exception ex)
        {
            throw new ApplicationException($"Error creating order for customer {request.CustomerId}. Details: {ex.Message}", ex);
        }
    }
} 