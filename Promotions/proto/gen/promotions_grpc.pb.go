// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v6.31.0
// source: proto/promotions.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PromotionsClient is the client API for Promotions service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PromotionsClient interface {
	GetProductPromotion(ctx context.Context, in *GetProductPromotionRequest, opts ...grpc.CallOption) (*PromotionResponse, error)
	GetAllActivePromotions(ctx context.Context, in *GetAllActivePromotionsRequest, opts ...grpc.CallOption) (*PromotionsListResponse, error)
}

type promotionsClient struct {
	cc grpc.ClientConnInterface
}

func NewPromotionsClient(cc grpc.ClientConnInterface) PromotionsClient {
	return &promotionsClient{cc}
}

func (c *promotionsClient) GetProductPromotion(ctx context.Context, in *GetProductPromotionRequest, opts ...grpc.CallOption) (*PromotionResponse, error) {
	out := new(PromotionResponse)
	err := c.cc.Invoke(ctx, "/promotions.Promotions/GetProductPromotion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promotionsClient) GetAllActivePromotions(ctx context.Context, in *GetAllActivePromotionsRequest, opts ...grpc.CallOption) (*PromotionsListResponse, error) {
	out := new(PromotionsListResponse)
	err := c.cc.Invoke(ctx, "/promotions.Promotions/GetAllActivePromotions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PromotionsServer is the server API for Promotions service.
// All implementations must embed UnimplementedPromotionsServer
// for forward compatibility
type PromotionsServer interface {
	GetProductPromotion(context.Context, *GetProductPromotionRequest) (*PromotionResponse, error)
	GetAllActivePromotions(context.Context, *GetAllActivePromotionsRequest) (*PromotionsListResponse, error)
	mustEmbedUnimplementedPromotionsServer()
}

// UnimplementedPromotionsServer must be embedded to have forward compatible implementations.
type UnimplementedPromotionsServer struct {
}

func (UnimplementedPromotionsServer) GetProductPromotion(context.Context, *GetProductPromotionRequest) (*PromotionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductPromotion not implemented")
}
func (UnimplementedPromotionsServer) GetAllActivePromotions(context.Context, *GetAllActivePromotionsRequest) (*PromotionsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllActivePromotions not implemented")
}
func (UnimplementedPromotionsServer) mustEmbedUnimplementedPromotionsServer() {}

// UnsafePromotionsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PromotionsServer will
// result in compilation errors.
type UnsafePromotionsServer interface {
	mustEmbedUnimplementedPromotionsServer()
}

func RegisterPromotionsServer(s grpc.ServiceRegistrar, srv PromotionsServer) {
	s.RegisterService(&Promotions_ServiceDesc, srv)
}

func _Promotions_GetProductPromotion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductPromotionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromotionsServer).GetProductPromotion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/promotions.Promotions/GetProductPromotion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromotionsServer).GetProductPromotion(ctx, req.(*GetProductPromotionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Promotions_GetAllActivePromotions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllActivePromotionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromotionsServer).GetAllActivePromotions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/promotions.Promotions/GetAllActivePromotions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromotionsServer).GetAllActivePromotions(ctx, req.(*GetAllActivePromotionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Promotions_ServiceDesc is the grpc.ServiceDesc for Promotions service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Promotions_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "promotions.Promotions",
	HandlerType: (*PromotionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProductPromotion",
			Handler:    _Promotions_GetProductPromotion_Handler,
		},
		{
			MethodName: "GetAllActivePromotions",
			Handler:    _Promotions_GetAllActivePromotions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/promotions.proto",
}
